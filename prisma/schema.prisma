// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  first_name      String
  last_name       String
  email           String        @unique
  phone           String
  password        String
  role            UserRoles
  is_blocked      Boolean       @default(false)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  user_settings   UserSettings?
  created_tickets Ticket[]      @relation("ticket_creator")
  assigned_ticket Ticket[]      @relation("ticket_asignee")
}

model UserSettings {
  id       Int       @id @default(autoincrement())
  language Languages
  color    String
  user_id  Int       @unique
  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Product {
  id      Int         @id @default(autoincrement())
  name    String
  type_id Int
  type    ProductType @relation(fields: [type_id], references: [id], onDelete: Cascade)
  tickets Ticket[]
}

model ProductType {
  id               Int       @id @default(autoincrement())
  name             String
  asigned_products Product[]
}

model Ticket {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  priority    TicketPriority
  type        TicketType
  creator_id  Int
  creator     User           @relation("ticket_creator", fields: [creator_id], references: [id], onDelete: Cascade)
  asignee_id  Int?
  asignee     User?          @relation("ticket_asignee", fields: [asignee_id], references: [id], onDelete: SetNull)
  product_id  Int
  product     Product        @relation(fields: [product_id], references: [id], onDelete: Cascade)
  files       File[]
	status			TicketStatus  @default(NEW)
	created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
	closed_at		DateTime?
}

model File {
  id        Int    @id @default(autoincrement())
  url       String
  filename  String
  ticket_id Int
  ticket    Ticket @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
}

enum UserRoles {
  SUPERUSER
  ADMIN
  SUPPORT
  USER
}

enum Languages {
  EN
  PL
}

enum TicketPriority {
  TRIVAL
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum TicketType {
  BUG
  ABSENCE
  TYPO
  CRASH
  OTHER
}

enum TicketStatus {
	NEW
	TAKEN
	CLARIFICATION_NEEDED
	REJECTED
	CLOSED
}
